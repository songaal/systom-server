<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="goods">

    <insert id="registerGoods" parameterType="Goods" keyProperty="id" keyColumn="id" useGeneratedKeys="true">
        INSERT INTO goods (strategy_id, version, exchange, coin_unit, base_unit, cash_unit, cash
                          , collect_start, collect_end, invest_start, invest_end, test_start, test_end
                          , name, description, author_id, test_result)
        VALUES (${strategyId},
                ${version},
                #{exchange},
                #{coinUnit},
                #{baseUnit},
                #{cashUnit},
                ${cash},
                ${collectStart},
                ${collectEnd},
                ${investStart},
                ${investEnd},
                ${testStart},
                ${testEnd},
                #{name},
                #{description},
                #{authorId},
                #{testResult}
        )
    </insert>

    <select id="getGoods" parameterType="Goods" resultType="Goods">
        SELECT a.id
             , a.strategy_id
             , a.version
             , a.exchange
             , a.coin_unit
             , a.base_unit
             , a.name
             , a.description
             , a.cash
             , a.cash_unit
             , a.is_display
             , a.collect_start
             , a.collect_end
             , a.invest_start
             , a.invest_end
             , a.test_start
             , a.test_end
             , a.test_result
             , a.author_id
             , b.invest_cash
             , a.create_time
             , a.task_ecs_id
             , a.timezone
             , if (concat(a.invest_start, <include refid="common.investStartTime"/>) <![CDATA[<=]]> date_format(now(), '%Y%m%d%H%i%s')
              and concat(a.invest_end, <include refid="common.investEndTime"/>) <![CDATA[>=]]> date_format(now(), '%Y%m%d%H%i%s')
                , 'RUNNING'
                , if (concat(a.invest_end, <include refid="common.investEndTime"/>) <![CDATA[<]]> date_format(now(), '%Y%m%d%H%i%s')
                   , 'CLOSE'
                   , 'WAIT')
             ) as status
            <if test="userId != null and userId != ''">
             , c.invest_id
            </if>
          FROM goods a
          LEFT JOIN (SELECT aa.id
                           , aa.goods_id
                           , sum(aa.invest_cash) as invest_cash
                        FROM invest_goods aa
                       WHERE aa.goods_id = ${id}
                       GROUP BY aa.goods_id
             ) b ON a.id = b.goods_id
          <if test="userId != null and userId != ''">
          LEFT JOIN (SELECT bb.goods_id
                          , bb.id as invest_id
                       FROM invest_goods bb
                      WHERE bb.user_id = #{userId}
                      GROUP BY bb.goods_id
             ) c on a.id = c.goods_id
          </if>
         WHERE a.id = ${id}
    </select>

    <select id="retrieveGoodsList" parameterType="Goods" resultType="Goods">
        SELECT a.id
             , a.strategy_id
             , a.version
             , a.exchange
             , a.coin_unit
             , a.base_unit
             , a.description
             , a.is_display
             , a.create_time
             , a.collect_start
             , a.collect_end
             , a.invest_start
             , a.invest_end
             , a.test_start
             , a.test_end
             , a.cash
             , a.cash_unit
             , a.name
             , a.author_id
             , a.test_result
             , a.create_time
             , a.task_ecs_id
             , ifnull(b.invest_cash, 0) as invest_cash
             , c.invest_id
             , if (concat(a.invest_start, <include refid="common.investStartTime"/>) <![CDATA[<=]]> date_format(now(), '%Y%m%d%H%i%s')
              and concat(a.invest_end, <include refid="common.investEndTime"/>) <![CDATA[>=]]> date_format(now(), '%Y%m%d%H%i%s')
                , 'RUNNING'
                , if (concat(a.invest_end, <include refid="common.investEndTime"/>) <![CDATA[<]]> date_format(now(), '%Y%m%d%H%i%s')
                   , 'CLOSE'
                   , 'WAIT')
             ) as status
          FROM goods a
          LEFT JOIN (SELECT aa.goods_id
						  , sum(aa.invest_cash) as invest_cash
				       FROM invest_goods aa
					  GROUP BY aa.goods_id
             ) b on a.id = b.goods_id
          LEFT JOIN (SELECT bb.goods_id
						  , bb.id as invest_id
				       FROM invest_goods bb
                      WHERE bb.user_id = #{userId}
				     GROUP BY bb.goods_id
		     ) c on a.id = c.goods_id
         WHERE 1=1
           AND a.exchange = #{exchange}
        <if test="isDisplay != null and isDisplay != ''">
           AND a.is_display = ${isDisplay}
        </if>
        <choose>
            <when test="collectStart != null and collectStart != '' and collectEnd != null and collectEnd != ''">
                AND concat(a.collect_start, <include refid="common.investStartTime" />) <![CDATA[ <= ]]> ${collectStart}
                AND concat(a.collect_end,   <include refid="common.investEndTime" />)   <![CDATA[ >= ]]> ${collectEnd}
            </when>
            <when test="investStart != null and investStart != '' and investEnd != null and investEnd != ''">
                AND concat(a.invest_start, <include refid="common.investStartTime" />) <![CDATA[ <= ]]> ${investStart}
                AND concat(a.invest_end,   <include refid="common.investEndTime" />)   <![CDATA[ >= ]]> ${investEnd}
            </when>
            <when test="investStart != null and investStart != ''">
                AND concat(a.invest_start, <include refid="common.investStartTime" />) <![CDATA[ > ]]> ${investStart}
            </when>
            <when test="investEnd != null and investEnd != ''">
                AND concat(a.invest_end,   <include refid="common.investStartTime" />) <![CDATA[ < ]]> ${investEnd}
            </when>
            <otherwise>
                1 = 2
            </otherwise>
        </choose>
        <![CDATA[
         ORDER BY id DESC
        ]]>
    </select>

    <update id="updateGoodsHide" parameterType="Integer">
        UPDATE goods
           SET is_display = false
         WHERE id = #{id}
    </update>

    <update id="updateGoodsShow" parameterType="Integer">
        UPDATE goods
        SET is_display = true
        WHERE id = #{id}
    </update>

    <delete id="deleteGoods" parameterType="Integer">
        DELETE FROM goods
         WHERE id = #{id}
    </delete>

    <update id="updateGoods" parameterType="Goods">
        UPDATE goods
           SET id = ${id}
            <if test="strategyId != null and strategyId != ''">
                , strategy_id         = ${strategyId}
            </if>
            <if test="version != null and version != ''">
                , version             = ${version}
            </if>
            <if test="exchange != null and strategyId != ''">
                , exchange            = #{exchange}
            </if>
            <if test="coinUnit != null and coinUnit != ''">
                , coin_unit           = #{coinUnit}
                , base_unit           = #{baseUnit}
            </if>
            <if test="name != null and name != ''">
                , name                = #{name}
            </if>
            <if test="description != null and description != ''">
                , description         = #{description}
            </if>
            <if test="cash != null and cash != ''">
                , cash                = ${cash}
            </if>
            <if test="cashUnit != null and cashUnit != ''">
                , cash_unit           = #{cashUnit}
            </if>
            <if test="collectStart != null and collectStart != ''">
                , collect_start       = ${collectStart}
            </if>
            <if test="collectEnd != null and collectEnd != ''">
                , collect_end         = ${collectEnd}
            </if>
            <if test="investStart != null and investStart != ''">
                , invest_start        = ${investStart}
            </if>
            <if test="investEnd != null and investEnd != ''">
                , invest_end          = ${investEnd}
            </if>
            <if test="cashUnit != null and cashUnit != ''">
                , cash_unit           = #{cashUnit}
            </if>
            <if test="testStart != null and testStart != ''">
                , test_start          = ${testStart}
            </if>
            <if test="testEnd != null and testEnd != ''">
                , test_end            = ${testEnd}
            </if>
            <if test="testResult != null and testResult != ''">
                , test_result         = #{testResult}
            </if>
         WHERE id = ${id}
    </update>

    <update id="createGoodsBackTest" parameterType="HashMap">
        UPDATE goods
           SET test_result = #{testResult}
         WHERE id = ${goodsId}
    </update>

    <update id="updateTaskEcsId" parameterType="Goods">
        UPDATE goods
           SET task_ecs_id = #{taskEcsId,jdbcType=VARCHAR}
         WHERE id = ${id}
    </update>

    <select id="selectInvestUserId" resultType="String" parameterType="Integer">
        SELECT b.user_id
          FROM goods a
          JOIN invest_goods b on a.id = b.goods_id
         WHERE a.id = #{param1}
    </select>

    <select id="selectGoodsIdList" resultType="Goods" parameterType="HashMap">
        SELECT id
             , strategy_id
             , version
             , exchange
             , coin_unit
             , base_unit
             , description
             , is_display
             , create_time
             , collect_start
             , collect_end
             , invest_start
             , invest_end
             , test_start
             , test_end
             , cash
             , cash_unit
             , name
             , author_id
             , test_result
             , create_time
             , task_ecs_id
          FROM goods
         WHERE 1=1
           AND ${column} in (#{val})
    </select>
</mapper>
